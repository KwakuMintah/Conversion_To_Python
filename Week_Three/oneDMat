import numpy as np

#All of the functions operate as they should but don't exist as methods of the class yet

arrOne = np.array([1,2,3,4])
arrTwo = np.array([5,6,7,8])
arrThree = np.zeros(4)
arrFour = np.zeros(4)

class oneDMat:
    def __init__(mat, rows, cols, storage):
        mat.rows = rows
        mat.cols = cols
        mat.size = rows * cols
        mat.storage = storage
    def addition(mat, matOne, matTwo):
        for i in range(mat.size):
            mat.storage[i] = matOne.storage[i] + matTwo.storage[i] 
    def subtraction(mat, matOne, matTwo):
        for i in range(mat.size):
            mat.storage[i] = matOne.storage[i] - matTwo.storage[i]
    def multiplication(mat, matOne, matTwo):
        for i in range(mat.rows):
            for j in range(mat.rows):
                for k in range(mat.rows):
                    romOne = i * mat.rows
                    romTwo = k * mat.rows
                    indOne = j + romOne
                    indTwo = k + romOne
                    indThree = j + romOne
                    mat.storage[indOne] += matOne.storage[indTwo] * matTwo.storage[indThree]
    def search(mat, i_que, j_que):
        row = i_que - 1
        col = j_que - 1
        rom = row * mat.rows
        ind = col + rom
        if ind > mat.size:
            print("The matrix isn't that big.")
        for i in range(mat.size):
            if ind == i:
                print(mat.storage[i])


MatOne = oneDMat(2, 2, arrOne)
MatTwo = oneDMat(2, 2, arrTwo)
MatThree = oneDMat(2, 2, arrThree)
MatFour = oneDMat(2, 2, arrFour)





    
    


print(MatOne.size)
MatThree.addition(MatOne,MatTwo)
MatFour.multiplication(MatOne,MatTwo)
print(MatThree.storage)
print(MatFour.storage)
MatTwo.search(3, 6)
