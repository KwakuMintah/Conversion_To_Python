import numpy as np

#All of the functions operate as they should but don't exist as parameters of the class yet

arrOne = np.array([1,2,3,4])
arrTwo = np.array([5,6,7,8])
arrThree = np.zeros(4)
arrFour = np.zeros(4)

class oneDMat:
    def __init__(mat, rows, cols, storage):
        mat.rows = rows
        mat.cols = cols
        mat.size = rows * cols
        mat.storage = storage
    


MatOne = oneDMat(2, 2, arrOne)
MatTwo = oneDMat(2, 2, arrTwo)
MatThree = oneDMat(2, 2, arrThree)
MatFour = oneDMat(2, 2, arrFour)

def addition(matOne, matTwo, matThree, size):
        for i in range(size):
            matThree[i] = matOne[i] + matTwo[i]

def subtraction(matOne, matTwo, matThree, size):
        for i in range(size):
            matThree[i] = matOne[i] + matTwo[i]

def multiplication(matOne, matTwo, matThree, rows):
    for i in range(rows):
        for j in range(rows):
            for k in range(rows):
                romOne = i * rows
                romTwo = k * rows
                indOne = j + romOne
                indTwo = k + romOne
                indThree = j + romOne
                matThree[indOne] += matOne[indTwo] * matTwo[indThree]

def search(mat, oldrow, oldcol, rows, size):
    row = oldrow - 1
    col = oldcol - 1
    rom = row * rows
    ind = col + rom
    for i in range(size):
        if ind == i:
            print(mat[i])
    
            
arrThree = (addition(MatOne.storage,MatTwo.storage,MatThree.storage,4))
arrFour = (multiplication(MatOne.storage,MatTwo.storage,MatFour.storage,2))


print(MatOne.size)
print(MatThree.storage)
print(MatFour.storage)
search(MatOne.storage,1,1,2,4)
